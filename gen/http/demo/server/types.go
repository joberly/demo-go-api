// Code generated by goa v3.10.1, DO NOT EDIT.
//
// demo HTTP server types
//
// Command:
// $ goa gen github.com/joberly/demo-go-api/design

package server

import (
	demo "github.com/joberly/demo-go-api/gen/demo"
	demoviews "github.com/joberly/demo-go-api/gen/demo/views"
	goa "goa.design/goa/v3/pkg"
)

// RandRequestBody is the type of the "demo" service "rand" endpoint HTTP
// request body.
type RandRequestBody struct {
	Min *int64 `form:"min,omitempty" json:"min,omitempty" xml:"min,omitempty"`
	Max *int64 `form:"max,omitempty" json:"max,omitempty" xml:"max,omitempty"`
}

// RandResponseBody is the type of the "demo" service "rand" endpoint HTTP
// response body.
type RandResponseBody struct {
	Result *int64 `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
}

// RandInvalidArgumentsResponseBody is the type of the "demo" service "rand"
// endpoint HTTP response body for the "invalid_arguments" error.
type RandInvalidArgumentsResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewRandResponseBody builds the HTTP response body from the result of the
// "rand" endpoint of the "demo" service.
func NewRandResponseBody(res *demoviews.RandResultView) *RandResponseBody {
	body := &RandResponseBody{
		Result: res.Result,
	}
	return body
}

// NewRandInvalidArgumentsResponseBody builds the HTTP response body from the
// result of the "rand" endpoint of the "demo" service.
func NewRandInvalidArgumentsResponseBody(res *goa.ServiceError) *RandInvalidArgumentsResponseBody {
	body := &RandInvalidArgumentsResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRandPayload builds a demo service rand endpoint payload.
func NewRandPayload(body *RandRequestBody) *demo.RandPayload {
	v := &demo.RandPayload{
		Min: body.Min,
		Max: body.Max,
	}

	return v
}
