// Code generated by goa v3.10.1, DO NOT EDIT.
//
// demo HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/joberly/demo-go-api/design

package server

import (
	"context"
	"errors"
	"net/http"
	"strconv"

	demoviews "github.com/joberly/demo-go-api/gen/demo/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeRandResponse returns an encoder for responses returned by the demo
// rand endpoint.
func EncodeRandResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*demoviews.RandResult)
		enc := encoder(ctx, w)
		body := NewRandResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeRandRequest returns a decoder for requests sent to the demo rand
// endpoint.
func DecodeRandRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			min *int64
			max *int64
			err error
		)
		{
			minRaw := r.URL.Query().Get("min")
			if minRaw != "" {
				v, err2 := strconv.ParseInt(minRaw, 10, 64)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("min", minRaw, "integer"))
				}
				min = &v
			}
		}
		{
			maxRaw := r.URL.Query().Get("max")
			if maxRaw != "" {
				v, err2 := strconv.ParseInt(maxRaw, 10, 64)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("max", maxRaw, "integer"))
				}
				max = &v
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewRandPayload(min, max)

		return payload, nil
	}
}

// EncodeRandError returns an encoder for errors returned by the rand demo
// endpoint.
func EncodeRandError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(ctx context.Context, err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en goa.GoaErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.GoaErrorName() {
		case "invalid_arguments":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(ctx, res)
			} else {
				body = NewRandInvalidArgumentsResponseBody(res)
			}
			w.Header().Set("goa-error", res.GoaErrorName())
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}
