// Code generated by goa v3.10.1, DO NOT EDIT.
//
// demo HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/joberly/demo-go-api/design

package client

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"

	demo "github.com/joberly/demo-go-api/gen/demo"
	demoviews "github.com/joberly/demo-go-api/gen/demo/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildRandRequest instantiates a HTTP request object with method and path set
// to call the "demo" service "rand" endpoint
func (c *Client) BuildRandRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RandDemoPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("demo", "rand", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRandRequest returns an encoder for requests sent to the demo rand
// server.
func EncodeRandRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*demo.RandPayload)
		if !ok {
			return goahttp.ErrInvalidType("demo", "rand", "*demo.RandPayload", v)
		}
		values := req.URL.Query()
		if p.Min != nil {
			values.Add("min", fmt.Sprintf("%v", *p.Min))
		}
		if p.Max != nil {
			values.Add("max", fmt.Sprintf("%v", *p.Max))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeRandResponse returns a decoder for responses returned by the demo rand
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
// DecodeRandResponse may return the following errors:
//   - "invalid_arguments" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeRandResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RandResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("demo", "rand", err)
			}
			p := NewRandResultViewOK(&body)
			view := "default"
			vres := &demoviews.RandResult{Projected: p, View: view}
			if err = demoviews.ValidateRandResult(vres); err != nil {
				return nil, goahttp.ErrValidationError("demo", "rand", err)
			}
			res := demo.NewRandResult(vres)
			return res, nil
		case http.StatusBadRequest:
			var (
				body RandInvalidArgumentsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("demo", "rand", err)
			}
			err = ValidateRandInvalidArgumentsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("demo", "rand", err)
			}
			return nil, NewRandInvalidArguments(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("demo", "rand", resp.StatusCode, string(body))
		}
	}
}
