// Code generated by goa v3.10.1, DO NOT EDIT.
//
// demo views
//
// Command:
// $ goa gen github.com/joberly/demo-go-api/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// RandResult is the viewed result type that is projected based on a view.
type RandResult struct {
	// Type to project
	Projected *RandResultView
	// View to render
	View string
}

// RandResultView is a type that runs validations on a projected type.
type RandResultView struct {
	Result *int64
}

var (
	// RandResultMap is a map indexing the attribute names of RandResult by view
	// name.
	RandResultMap = map[string][]string{
		"default": {
			"result",
		},
	}
)

// ValidateRandResult runs the validations defined on the viewed result type
// RandResult.
func ValidateRandResult(result *RandResult) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateRandResultView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateRandResultView runs the validations defined on RandResultView using
// the "default" view.
func ValidateRandResultView(result *RandResultView) (err error) {

	return
}
